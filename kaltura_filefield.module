<?php


/**
 * Implementation of hook_menu()
 */
 function kaltura_filefield_menu() {
    $items['admin/settings/kaltura-filefield'] = array(
      'title' => 'Kaltura Filefield Settings',
      'description' => t('Kaltura Field API Settings'),
      'page callback' => 'drupal_get_form', // assuming that you want to use a form
      'page arguments' => array('kaltura_filefield_settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer content types'), // or use hook_perm() to make your own
      'type' => MENU_NORMAL_ITEM,
      );

    $items['kaltura-filefield/notification_handler'] = array(
      'page callback' => 'kaltura_filefile_notification', // assuming that you want to use a form
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      );
    return $items;
  }

/**
 * Notification callback for Kaltura Server
 */
function kaltura_filefile_notification() {
  $admin_secret = variable_get('kaltura_admin_secret', '');
  $params = $_POST;
  unset($params['q']);
  $notification = new KalturaNotificationClient($params, $admin_secret);
  if ($notification->valid_signature === NULL) {
    watchdog('kaltura_filefield', 'notification params empty');
    return FALSE;
  }
  elseif ($notification->valid_signature === FALSE) {
    watchdog('kaltura_filefield', 'notification signature not valid');
    return FALSE;
  }

  // Update the local status of a file
  if ($params['not1_notification_type'] == 'entry_update') {
    foreach ($notification->data as $data) {
        if ($data['entry_id'] && $data['status']) {
          kaltura_filefield_entry_update($data['entry_id'], $data['status']);
        }
    }
  }
  // Or if it has been deleted remotely, remove local references to it
  elseif ($params['not1_notification_type'] == 'entry_delete') {
    kaltura_filefield_entry_delete($params['not1_entry_id']);
  }
}

function kaltura_filefield_settings(){

  $form = array();
  $form['kaltura_filefield_allowed_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Media Types to Post to Kaltura'),
    '#required' => true,
    '#description' => t('Automatically post files of these media types to the Kaltura server.'),
    '#options' => array('audio', 'video', 'image'),
    '#default_value' => variable_get('kaltura_filefield_allowed_types', array('audio', 'video')),
    );

    $form['kaltura_filefield_tags'] = array(
      '#type' => 'textfield',
      '#title' => t('Global Tags'),
      '#size' => 30,
      '#required' => true,
      '#description' => t('Apply a set of default Kaltura tags to every submitted entry (separated by commas)'),
      '#default_value' => variable_get('kaltura_filefield_tags', FALSE)
      );

    $form['kaltura_filefield_access_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Access Control Profile ID'),
      '#size' => 10,
      '#required' => FALSE,
      '#description' => t('Find the access control ID  in the Kaltura dashboard (kmc.kaltura.com) at Settings > Access Control. Uses "default" profile if not set here.'),
      '#default_value' => variable_get('kaltura_filefield_access_id', FALSE)
      );

    $form['kaltura_conversion_profile_id_audio'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Audio Conversion Profile ID'),
      '#size' => 10,
      '#required' => FALSE,
      '#description' => t('Find the profile and its ID in the Kaltura dashboard (kmc.kaltura.com) at Settings > Transcoding Settings. Uses "default" profile if not set here.'),
      '#default_value' => variable_get('kaltura_conversion_profile_id_audio', FALSE)
     );

    $form['kaltura_conversion_profile_id_video'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Video Conversion Profile ID'),
      '#size' => 10,
      '#required' => FALSE,
      '#description' => t('Find the profile and its ID in the Kaltura dashboard (kmc.kaltura.com) at Settings > Transcoding Settings. Uses "default" profile if not set here.'),
      '#default_value' => variable_get('kaltura_conversion_profile_id_video', FALSE)
     );

    $form['kaltura_conversion_profile_id_image'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Image Conversion Profile ID'),
      '#size' => 10,
      '#required' => FALSE,
      '#description' => t('Find the profile and its ID in the Kaltura dashboard (kmc.kaltura.com) at Settings > Transcoding Settings. Uses "default" profile if not set here.'),
      '#default_value' => variable_get('kaltura_conversion_profile_id_image', FALSE)
     );

    $form['kaltura_notify_urls'] = array(
      '#type' => 'textarea',
      '#title' => t('Kaltura Notify These URLS (Pipe | delimited)'),
      '#required' => FALSE,
      '#description' => t('A pipe delimited set of URLs (e.g. Drupal instances) that you would like Kaltura to notify of entry updates.
        This might be useful if you have a staging and/or development site that you would like to stay in sync with a production site.'),
      '#default_value' => variable_get('kaltura_notify_urls', FALSE)
     );

  return system_settings_form($form);
}

/**
 * Implements filefield's hook_file_insert()
 *
 * @param object $file
 *  A Drupal File object
 *
 * @return void
 */
function kaltura_filefield_file_insert(&$file) {
  kaltura_filefield_add_file($file);
}

/**
 * Add a Drupal file to the Kaltura Streaming Media Server
 *
 * @param object $file
 *  A Drupal File object
 *
 * @return void
 */
function kaltura_filefield_add_file($file) {
  module_load_include('php', 'kaltura', '/kaltura_client/KalturaClient');

  $config = kaltura_filefield_config();
  // Allow others to alter this config on a per-file basis
  drupal_alter('kaltura_filefield_config', $config, $file);

  if (!$type = kaltura_filefield_type($file, $config['kaltura_filefield_allowed_types'])) {
    // Bail if this is not the media type you were looking for, move along
    return false;
  }

  $session_user = KalturaHelpers::getSessionUser();
  $kclient  = KalturaHelpers::getKalturaClient(TRUE);

  $kconf->format = KalturaClientBase::KALTURA_SERVICE_FORMAT_PHP;
  $token = $kclient->media->upload($file->filepath);
  $entry = new KalturaMediaEntry();
  $entry->tags = $config['kaltura_filefield_tags'];
  $entry->name =  $file->filename;

  // Tells our kaltura_renotify script which sites to pass the Kaltura
  // notification updates to (The Kaltura server only allows you to set one URL
  // to notify, so we have to repost the data ourselves to update any
  // additional servers)
  $urls = array(url('kaltura-filefield/notification_handler', array('absolute' => TRUE)));

  // Check to see if there are other servers we need to notify
  if ($config['kaltura_notify_urls']) {
    $urls = array_merge($urls, explode('|', $config['kaltura_notify_urls']));
  }
  
  $entry->partnerData = json_encode(array('notify' => $urls));

  if ($config['kaltura_filefield_access_id']) {
    $entry->accessControlId = $config['kaltura_filefield_access_id'];
  }

  // Is there a way to call the following constants with a variable or something so that
  // I don't have to hard code them here?
  if ($type == 'AUDIO') {
    $entry->mediaType = KalturaMediaType::AUDIO;
       watchdog('kaltura_filefield', serialize($entry));

    if ($config['kaltura_conversion_profile_id_audio']) {
      $entry->conversionProfileId = $config['kaltura_conversion_profile_id_audio'];
    }
  }
  if ($type == 'VIDEO') {
    $entry->mediaType = KalturaMediaType::VIDEO;
    if ($config['kaltura_conversion_profile_id_video']) {
      $entry->conversionProfileId = $config['kaltura_conversion_profile_id_video'];
    }
  }
  if ($type == 'IMAGE') {
    $entry->mediaType = KalturaMediaType::IMAGE;
    if ($config['kaltura_conversion_profile_id_image']) {
      $entry->conversionProfileId = $config['kaltura_conversion_profile_id_image'];
    }
  }

  $result = $kclient->media->addFromUploadedFile($entry, $token);

  // Save a local reference to the remote Kaltura file
  kaltura_filefield_entry_save($result->id, $file->fid);
}

/**
 * Save a local reference to the remote Kaltura file
 *
 * @param string $file
 *    A unique identifier for a Kaltura Entry
 *
 * @param int $fid
 *    A drupal file identifier
 *
 * @return void
 */
function kaltura_filefield_entry_save($entry_id, $fid) {
  db_query("INSERT INTO {kaltura_filefield} (entry_id, fid, status) VALUES ('%s', %d, 0)", $entry_id, $fid);
}

/**
 * Update a local reference to the remote Kaltura file status
 *
 * @param string $entry_id
 *    A unique identifier for a Kaltura Entry
 *
 * @return void
 */
function kaltura_filefield_entry_update($entry_id, $status) {
  db_query("UPDATE {kaltura_filefield} SET status=%d  WHERE entry_id='%s'", $status, $entry_id);
}

/**
 * Delete a local reference to the remote Kaltura file status
 *
 * @param string $entry_id
 *    A unique identifier for a Kaltura Entry
 *
 * @return void
 */
function kaltura_filefield_entry_delete($entry_id) {
  db_query("DELETE FROM {kaltura_filefield} WHERE entry_id='%s'",$entry_id);
}

/**
 * Retrive a kaltura entry_id for a given Drupal file id
 *
 * @param int $fid
 *    A drupal file identifier
 *
 * @return string $entry_id
 *    A Kaltura entry unique identifier
 */
function kaltura_filefield_entry_id_get($fid) {
  return db_result(db_query('SELECT entry_id FROM {kaltura_filefield} WHERE fid=%d', $fid));
}

/**
 * Returns a Kaltura Media Type
 *
 * @param int $fid
 *    A drupal file identifier
 */
function kaltura_filefield_type($file, $types) {
  $mimetype = explode('/', $file->filemime);
  if (in_array($mimetype[0], $types)){
    return strtoupper($mimetype[0]);
  }
  else {
    return false;
  }
}

/**
 * Returns a Kaltura Media Type
 *
 *
 * @return array $config
 *    An array of Kaltura configurations
 */
function kaltura_filefield_config() {
  $configs = array();
  $variables = array(
    'kaltura_notify_urls',
    'kaltura_filefield_tags',
    'kaltura_filefield_allowed_types',
    'kaltura_filefield_access_id',
    'kaltura_conversion_profile_id_audio',
    'kaltura_conversion_profile_id_video',
    'kaltura_conversion_profile_id_image'
    );
  foreach ($variables as $var) {
    $configs[$var] = variable_get($var, FALSE);
  }
  return $configs;
}

/**
 * Implements filefield's hook_file_delete()
 *
 * @param object $file
 *    A Drupal File object
 */
function kaltura_filefield_file_delete($file) {
  $session_user = KalturaHelpers::getSessionUser();
  $kaltura_client = KalturaHelpers::getKalturaClient(TRUE);
  $media_service = new  KalturaMediaService($kaltura_client);
  if ($entry_id = kaltura_filefield_entry_id_get($file->fid)) {
    $result = $media_service->delete($entry_id);
    kaltura_filefield_entry_delete($entry_id);
    watchdog('kaltura_filefield', 'Deleting the following entry from Kaltura: '. $entry_id);
  }
}

/*
 * Implementation of hook_kaltura_notification_handler().
 */
function kaltura_filefield_kaltura_notification_handler($data) {
  watchdog('kfield', serialize($data));
}


/**
 * Create a unique-ish identifier for each site for use
 *
 * Like $site_key in _update_refresh() - returns a site-specific hash.
  */
function kaltura_filefield_site_hash() {
  if (!($hash = variable_get('apachesolr_site_hash', FALSE))) {
    global $base_url;
    // Set a random 6 digit base-36 number as the hash.
    $hash = substr(base_convert(sha1(uniqid($base_url, TRUE)), 16, 36), 0, 6);
    variable_set('apachesolr_site_hash', $hash);
  }
  return $hash;
}
